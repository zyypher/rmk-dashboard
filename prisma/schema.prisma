generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  EDITOR
  VIEWER
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  phone               String?
  role                RoleType             @default(VIEWER)
  firstName           String?
  lastName            String?
  phoneNumber         String?
  password            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  passwordResetTokens PasswordResetToken[]

  @@index([createdAt])
}

model Trainer {
  id             String                 @id @default(uuid())
  name           String
  email          String?
  phone          String?
  languages      Language[]             @relation("TrainerLanguages")
  locationId     String?
  location       Location?              @relation(fields: [locationId], references: [id])
  courses        Course[]
  availableDays  Day[]
  timeSlots      Json?
  leaves         TrainerLeave[]
  schedulingRule TrainerSchedulingRule? @relation("TrainerToScheduleRule")
  sessions       TrainingSession[]      @relation("TrainerSessions")
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model TrainerLeave {
  id        String   @id @default(uuid())
  trainerId String
  date      DateTime
  reason    String?
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String   @id @default(uuid())
  name      String
  address   String
  isOnline  Boolean  @default(false)
  rooms     Room[]
  trainers  Trainer[]
  sessions  TrainingSession[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id         String   @id @default(uuid())
  name       String
  capacity   Int?
  notes      String?
  locationId String
  location   Location @relation(fields: [locationId], references: [id])
  sessions   TrainingSession[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Client {
  id           String        @id @default(uuid())
  name         String
  phone        String
  email        String?
  company      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  certificates Certificate[]
}

model Course {
  id           String            @id @default(uuid())
  title        String
  categoryId   String
  category     Category          @relation(fields: [categoryId], references: [id])
  languages    Language[]        @relation("CourseLanguages")
  duration     String
  trainerId    String
  trainer      Trainer           @relation(fields: [trainerId], references: [id])
  isCertified  Boolean           @default(false)
  isPublic     Boolean           @default(true)
  sessions     TrainingSession[]
  certificates Certificate[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([createdAt])
}

model TrainingSession {
  id            String        @id @default(uuid())
  courseId      String
  trainerId     String
  roomId        String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  locationId    String?
  status        SessionStatus @default(SCHEDULED)
  participants  Int?
  notes         String?
  selectedSeats Json?
  language      String?
  course        Course        @relation(fields: [courseId], references: [id])
  trainer       Trainer       @relation("TrainerSessions", fields: [trainerId], references: [id])
  room          Room          @relation(fields: [roomId], references: [id])
  location      Location?     @relation(fields: [locationId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([createdAt])
}

model Certificate {
  id            String   @id @default(uuid())
  clientId      String
  courseId      String
  issueDate     DateTime
  certificateId String   @unique
  issuedBy      String
  client        Client   @relation(fields: [clientId], references: [id])
  course        Course   @relation(fields: [courseId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id        String    @id @default(uuid())
  name      String    @unique
  trainers  Trainer[] @relation("TrainerLanguages")
  courses   Course[]  @relation("CourseLanguages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model TrainerSchedulingRule {
  id                String   @id @default(uuid())
  trainerId         String   @unique
  trainer           Trainer  @relation("TrainerToScheduleRule", fields: [trainerId], references: [id])
  maxSessionsPerDay Int
  daysOff           Day[]
  allowOverlap      Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
