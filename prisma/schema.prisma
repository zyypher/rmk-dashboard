generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  EDITOR
  VIEWER
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum DelegateStatus {
  CONFIRMED
  NOT_CONFIRMED
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  phone               String?
  role                RoleType             @default(VIEWER)
  firstName           String?
  lastName            String?
  phoneNumber         String?
  password            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  passwordResetTokens PasswordResetToken[]

  @@index([createdAt])
}

model Trainer {
  id             String                 @id @default(uuid())
  name           String
  email          String?
  phone          String?
  languages      Language[]             @relation("TrainerLanguages")
  locationId     String?
  location       Location?              @relation(fields: [locationId], references: [id])
  courses        Course[]               @relation("TrainerCourses")
  availableDays  Day[]
  timeSlots      Json?
  dailyTimeSlots Json?
  leaves         TrainerLeave[]
  schedulingRule TrainerSchedulingRule? @relation("TrainerToScheduleRule")
  sessions       TrainingSession[]      @relation("TrainerSessions")
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model TrainerLeave {
  id        String   @id @default(uuid())
  trainerId String
  startDate DateTime
  endDate   DateTime
  reason    String?
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id               String            @id @default(uuid())
  name             String
  emirate          String
  deliveryApproach String?
  zoomLink         String?
  locationType     String?
  rooms            Room[]
  trainers         Trainer[]
  sessions         TrainingSession[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Room {
  id         String            @id @default(uuid())
  name       String
  capacity   Int?
  notes      String?
  locationId String
  location   Location          @relation(fields: [locationId], references: [id])
  sessions   TrainingSession[]
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Client {
  id                 String   @id @default(uuid())
  name               String
  phone              String
  email              String?
  contactPersonName  String?
  tradeLicenseNumber String?
  delegates          Delegate[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Course {
  id          String            @id @default(uuid())
  title       String
  shortname   String?
  categoryId  String
  category    Category          @relation(fields: [categoryId], references: [id])
  languages   Language[]        @relation("CourseLanguages")
  duration    String
  isCertified Boolean           @default(false)
  isPublic    Boolean           @default(true)
  sessions    TrainingSession[]
  trainers    Trainer[]         @relation("TrainerCourses")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([createdAt])
}

model TrainingSession {
  id            String     @id @default(uuid())
  courseId      String
  trainerId     String
  roomId        String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  locationId    String?
  participants  Int?
  notes         String?
  selectedSeats Json?
  language      String?
  course        Course     @relation(fields: [courseId], references: [id])
  trainer       Trainer    @relation("TrainerSessions", fields: [trainerId], references: [id])
  room          Room       @relation(fields: [roomId], references: [id])
  location      Location?  @relation(fields: [locationId], references: [id])
  delegates     Delegate[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([createdAt])
}

model Delegate {
  id          String   @id @default(uuid())
  seatId      String
  sessionId   String
  name        String
  emiratesId  String
  phone       String
  email       String
  clientId    String?  // âœ… Optional at first
  client      Client?  @relation(fields: [clientId], references: [id])
  companyName String
  isCorporate Boolean
  photoUrl    String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  session     TrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}


model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Language {
  id        String    @id @default(uuid())
  name      String    @unique
  trainers  Trainer[] @relation("TrainerLanguages")
  courses   Course[]  @relation("CourseLanguages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model TrainerSchedulingRule {
  id                String   @id @default(uuid())
  trainerId         String   @unique
  trainer           Trainer  @relation("TrainerToScheduleRule", fields: [trainerId], references: [id])
  maxSessionsPerDay Int
  daysOff           Day[]
  allowOverlap      Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
